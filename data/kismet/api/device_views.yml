- 
  name: "List device views"
  uri: "/devices/views/all_views"
  types: ["anyjson"]
  methods: ["GET"]
  roles: ["readonly"]
  docs: | 
    Return a list of all defined device views, and a summary of the numbers of devices in each view. 
  return: | 
    JSON list of view data

-
  name: "View-based device lists"
  docs: | 
    The View device API is the primary interface for clients to access the device list and for 
    scripts to retrieve lists of devices. 

    It is designed to be directly interfaced with a paginating display mechanism, and is best 
    utilized when applying a view window via the `start` and `length` variables. 
  uri: "/devices/views/{VIEWID}/devices"
  types: ["anyjson"]
  methods: ["POST"]
  roles: ["readonly"]
  uriparameters: 
    - 
      name: "VIEWID"
      type: "string"
      required: true 
      description: | 
        Named device view
  jsonparameters: 
    - {auto: "fields"}
    - {auto: "regex" }
    - 
      name: "colmap" 
      type: "list"
      required: false
      description: |
        Column map information generated by the Kismet UI for mapping 
        jquery-datatable column information for sorting and ordering. 
    - 
      name: "datatable"
      type: "boolean"
      required: false 
      description: |
        Wrap output in a container suitable for connecting to a jquery-datatable 
        container in the web UI.
  parameters:
    -
      name: "start"
      type: "number"
      required: false 
      description: |
        When in datatables mode, the start of the windowed view.
    -
      name: "length"
      type: "number"
      required: false
      description: |
        When in datatables mode, the length of the windowed view.
    -
      name: "draw"
      type: "number"
      required: false 
      description: |
        When in datatables mode, the datatable draw sequence number.
    - 
      name: "search[value]"
      type: "string"
      required: false 
      description: |
        When in datatables mode, the search term to be applied to all fields in the 
        summary list.
    - 
      name: "order[0][column]"
      type: "string"
      required: false
      description: |
        When in datatables mode, the display column number for shorting, indexed by 
        the colmap JSON data parameter.
    -
      name: "order[0][dir]"
      type: "string"
      required: false 
      description: |
        When in datatables mode, the sort direction sent by jquery-datatables.
  notes: | 
    In datatables mode, this endpoint takes both a `json=...` command dictionary *and* typical 
    FORM post variables.  This is necessary to work within the datatables request structure.
  return: | 
    JSON object containing the list of devices and metadata for jquery-datatables.
  responses:
    success:
      - [200, "Basic success and JSON object"]
    failure:
      - [-1, "On error (typically for malformed simplification)"]
 
-
  name: "Devices by view and time"
  uri: "/devices/views/{VIEWID}/last-time/{TIMESTAMP}/devices"
  types: ["anyjson"]
  methods: ["GET", "POST"]
  roles: ["readonly"]
  uriparameters:
    - 
      name: "VIEWID"
      type: "string"
      required: true 
      description: | 
        Named device view
    - {auto: "timestamp"}
  jsonparameters:
    - {auto: "fields"}
    - {auto: "regex"}
    - 
      name: "colmap" 
      type: "list"
      required: false
      description: |
        Column map information generated by the Kismet UI for mapping 
        jquery-datatable column information for sorting and ordering. 
    - 
      name: "datatable"
      type: "boolean"
      required: false 
      description: |
        Wrap output in a container suitable for connecting to a jquery-datatable 
        container in the web UI.
  parameters:
    -
      name: "start"
      type: "number"
      required: false 
      description: |
        When in datatables mode, the start of the windowed view.
    -
      name: "length"
      type: "number"
      required: false
      description: |
        When in datatables mode, the length of the windowed view.
    -
      name: "draw"
      type: "number"
      required: false 
      description: |
        When in datatables mode, the datatable draw sequence number.
    - 
      name: "search[value]"
      type: "string"
      required: false 
      description: |
        When in datatables mode, the search term to be applied to all fields in the 
        summary list.
    - 
      name: "order[0][column]"
      type: "string"
      required: false
      description: |
        When in datatables mode, the display column number for shorting, indexed by 
        the colmap JSON data parameter.
    -
      name: "order[0][dir]"
      type: "string"
      required: false 
      description: |
        When in datatables mode, the sort direction sent by jquery-datatables.
  docs: |
    Devices which have been active since the specified time will be returned.

    For real-time monitoring, the [device monitoring websocket](/docs/api/devices/#realtime-device-monitoring) is often more efficient.
  return: |
    JSON list of devices in `VIEWID` with activity more recent than `TIMESTAMP`.

- 
  name: "Realtime device monitoring by view" 
  uri: "/devices/views/{VIEWID}/monitor"
  types: ["ws"]
  methods: ["WEBSOCKET UPGRADE"]
  roles: ["readonly"]
  added: "2021-01"
  uriparameters:
    - 
      name: "VIEWID"
      type: "string"
      required: true
      description: | 
        Named device view
    -
      name: "user" 
      type: "string"
      required: false
      description: | 
        User to log in as; websockets do not support standard basic-auth, 
        cookies, or other header-based login methods.

        You must provide either `user` and `password` parameters, or an 
        API token or login session token via the `KISMET` paraeter.
    -
      name: "password" 
      type: "string" 
      required: false
      description: |
        Password associated with the login user. 

        You must provide either `user` and `password` parameters, or an 
        API token or login session token via the `KISMET` parameter.
    -
      name: "KISMET"
      type: "string"
      required: false
      description: |
        Kismet auth token or API key.

        You must provide either `user` and `password` parameters, or an 
        API token or login session token via the `KISMET` parameter.
  docs: | 
    Devices can be monitored in realtime using the device monitor websocket API, which will push device 
    changes to listeners as they occur. 

    By subscribing to devices, or groups of devices, a client can receive a push event of the device 
    record.  

    The device data pushed can also be simplified by the standard [field simplification](/docs/api/command_param/#field-simplification). 
  apinotes: |
    The device monitoring subscription API accepts JSON objects with a subscription or removal request 
    for a device or group of devices specified by [key, MAC, or group MAC](/docs/api/keys_and_macs),
    and optional [field simplification](/docs/api/command_param/#field-simplification). 

    #### Subscription API 
    
    Multiple subscriptions can be made on a single websocket connection, so long as each subscription 
    request has a unique ID.  Use of duplicate IDs will automatically unsubscribe the previous 
    subscription. 

    {{< kismet_api_param name="monitor" type="string" required="true">}}
      Device identifier specified by key, MAC, or group of MACs with a masking value, as defined in [Keys and MACs](/docs/api/keys_and_macs).  

      The wildcard `*` can be used to monitor *all* devices.
    {{< /kismet_api_param >}}

    {{< kismet_api_param name="request" type="number" required="true">}}
      Unique request ID, supplied by the client.  This ID will be used if the client wishes to unsubscribe from events in the future via the cancel API.
    {{< /kismet_api_param >}}

    {{< kismet_api_param name="rate" type="number" required="true">}}
      Rate limit, in seconds, to push updates.  More frequent device updates are discarded.
    {{< /kismet_api_param >}}

    {{< kismet_api_param auto="fields" >}}{{< /kismet_api_param >}}

    #### Removal API 
    
    To cease monitoring a device (or group of devices) without disconnecting the websocket, use 
    the unsubscribe API.

    {{< kismet_api_param name="cancel" type="number" required="true">}}
      Stop monitoring reports from the provided id. 
    {{< /kismet_api_param >}}
  example: |
    Constructing and connecting a websocket uses the standard Javascript websocket 
    API, we'll request all devices with the OUI of `AA:BB:CC`, updated at once per second, 
    fetching the key, last-active time, and last signal level.

    ```javascript 
    var ws = new Websocket('ws://host:2501/devices/views/FOOBAR/monitor.ws?'
      'user=username&password=password');
    ws.onmessage = function(msg) {
        var json = JSON.parse(msg.data);
        console.log(json);
    }
    ws.onopen = function(event) {
        var req = {
            "monitor": "AA:BB:CC:00:00:00/FF:FF:FF:00:00:00",
            "request": 31337,
            "rate": 1,
            "fields": [ 
              "kismet.device.base.key",
              "kismet.device.base.last_time",
              "kismet.device.base.signal/kismet.common.signal.last_signal"
            ],
        }
        ws.send(JSON.stringify(req));
    }
    ```

    This would return pushed records like: 

    ```json 
    {
      "kismet.common.signal.last_signal": -77,
      "kismet.device.base.last_time": 1605736428,
      "kismet.device.base.key": "4202770D00000000_AABBCCDDEEFF"
    }
    ```
    ```json 
    {
      "kismet.common.signal.last_signal": -81,
      "kismet.device.base.last_time": 1605736427,
      "kismet.device.base.key": "4202770D00000000_001122334455"
    }
    ```

    Which would be highly appropriate for monitoring signal levels of a group of devices, for 
    instance.
