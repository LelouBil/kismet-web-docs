-
  name: "Legacy device summary"
  uri: "/devices/summary/devices"
  types: ["json"]
  deprecated: |
    While still available for legacy code, this API has been deprecated 
    in favor of the [device view API](/docs/api/device-view/) `all` view.
  methods: ["GET", "POST"]
  roles: ["readonly"]
  docs: |
    The device summary API is the base API beneath a scrollable view of 
    devices Kismet is tracking. 

    It is designed to be connected to a jquery-datatables view, but can be used by 
    any UI mechanism with a concept of a scrolling sub-view. 

    Whenever possible, a UI is *highly* encouraged to use a scrolling window mechanism 
    to view the devices:  Kismet can track tens or hundreds of thousands of devices,
    and trying to render them all as a single view will likely over-tax both the 
    Kismet server and whatever is rendering the UI.

    When in datatables mode (`datatable` set to `true` in the JSON argument), this API 
    takes additional `FORM` variables from the jquery-datatables implementation.
  jsonparameters: 
    -
      auto: "fields"
    - 
      auto: "regex"
    - 
      name: "colmap" 
      type: "string"
      required: false
      description: |
        Column map information generated by the Kismet UI for mapping 
        jquery-datatable column information for sorting and ordering. 
    - 
      name: "datatable"
      type: "boolean"
      required: false 
      description: |
        Wrap output in a container suitable for connecting to a jquery-datatable 
        container in the web UI.
  parameters:
    -
      name: "start"
      type: "number"
      required: false 
      description: |
        When in datatables mode, the start of the windowed view.
    -
      name: "length"
      type: "number"
      required: false
      description: |
        When in datatables mode, the length of the windowed view.
    -
      name: "draw"
      type: "number"
      required: false 
      description: |
        When in datatables mode, the datatable draw sequence number.
    - 
      name: "search[value]"
      type: "string"
      required: false 
      description: |
        When in datatables mode, the search term to be applied to all fields in the 
        summary list.
    - 
      name: "order[0][column]"
      type: "string"
      required: false
      description: |
        When in datatables mode, the display column number for shorting, indexed by 
        the colmap JSON data parameter.
    -
      name: "order[0][dir]"
      type: "string"
      required: false 
      description: |
        When in datatabels mode, the sort direction sent by jquery-datatables.
  return: | 
    JSON object of system status snapshot.
  responses:
    success:
      - [200, "Basic success and JSON object"]
    failure:
      - [-1, "On error (typically for malformed simplification)"]

-
  name: "Bulk device list"
  uri: "/devices/all_devices"
  types: ["ekjson", "itjson"]
  deprecated: |
    This endpoint can run smaller systems out of memory and is generally not 
    encouraged.

    A much safer method is to use the [device view API](/docs/api/device-view/) 
    `all` view, using sort-by first seen and a sliding window.
  methods: ["GET", "POST"]
  roles: ["readonly"]
  docs: |
    This is a special `ekjson` endpoint which provides a dump of *all devices*. 

    This endpoint *only* supports the `ekjson` method, and returns one object per 
    row, formatted for use with a tool like Elastic Search.
  jsonparameters: 
    -
      auto: "fields"
    - 
      auto: "regex"

-
  name: "Recently active devices"
  uri: "/devices/last-time/{TIMESTAMP}/devices"
  types: ["anyjson"]
  methods: ["GET", "POST"]
  roles: ["readonly"]
  uriparameters:
    -
      auto: "timestamp"
  jsonparameters:
    -
      auto: "fields"
    -
      auto: "regex"
  docs: |
    Returns devices which have been active (traffic observed from the device address) 
    since the supplied timestamp.  

    Timestamps can be absolute or relative. 

    This endpoint is most typically used to repeatedly monitor recent devices, but 
    can be replaced with the more efficient push-style [eventbus websocket](/docs/api/eventbus/) 
    for many use cases.

-
  name: "Device by key"
  uri: "/devices/by-key/{DEVICEKEY}/device.json"
  types: ["anyjson"]
  methods: ["GET", "POST"]
  roles: ["readonly"]
  uriparameters:
    -
      name: "DEVICEKEY"
      type: "string"
      required: true 
      description: | 
        Kismet unique device key for matching 
  jsonparameters: 
    - 
      auto: "fields"
  docs: |
    Fetch a complete device record (with optional simplification), indexed by the 
    device key. 

    Typically a UI would use this endpoint to fetch a full device for displaying device 
    details.
  result: |
    JSON device object, or error.
  responses:
    success:
      - [200, "Success"]
    failure:
      - [404, "No such device key"]
      - [-1, "Request error, such as malformed device key"]

- 
  name: "Devices by MAC address"
  uri: "/devices/by-mac/{MACADDRESS}/devices.json"
  types: ["anyjson"]
  methods: ["GET", "POST"]
  roles: ["readonly"]
  uriparameters:
    - 
      name: "MACADDRESS"
      type: "string"
      required: true 
      description: | 
        MAC address for device matching 
  jsonparameters:
    - 
      auto: "fields"
  docs: |
    Fetch devices which match the supplied MAC address. 

    It is possibkle (though usually not likely) that there may be MAC address collisions 
    between different PHY types.  This becomes more likely when using either non-Wi-Fi 
    datasources which synthesize completely artificial MAC addresses for indexing 
    when no actual MAC address is available (such as RTL-433, ADSB, and other SDR 
    based datasources), or when capturing two wireless devices from the same 
    physical component, like a combo Wi-Fi/Bluetooth. 

    This API will always return a *list of devices*, even when only one device 
    matches the supplied MAC address. 
  result: |
    JSON list of device objects, or error. 
  responses: 
    success: 
      - [200, "Success"]
    failure: 
      - [404, "No devices for supplied MAC address"]
      - [-1, "Request error, such as a malformed MAC address"]

- 
  name: "Multiple devices by MAC addresses"
  uri: "/devices/multimac/devices"
  types: ["anyjson"]
  methods: ["POST"]
  roles: ["readonly"]
  jsonparameters:
    - 
      auto: "fields"
    -
      name: "devices"
      type: "list of strings"
      required: true 
      description: |
        A list of MAC addresses to search 
  docs: | 
    Fetch devices matching any of multiple MAC address (or [partial MAC address]()).

    Typically this endpoint would be used to monitor the presence of target devices. 

    This API always returns a list of devices, even if only one device is matched. 
  results: | 
    JSON list of device objects, or error. 
  responses: 
    success: 
      - [200, "Success"]
    failure: 
      - [-1, "Request error, such as a malformed MAC address"]

- 
  name: "Multiple devices by key (as list)"
  uri: "/devices/multikey/devices"
  types: ["anyjson"]
  methods: ["POST"]
  roles: ["readonly"]
  jsonparameters:
    - 
      auto: "fields"
    -
      name: "devices"
      type: "list of strings"
      required: true 
      description: |
        A list of device keys to search 
  docs: | 
    Fetch devices matching any of multiple device keys.

    Typically this endpoint would be used to monitor the presence of target devices. 

    This API always returns a list of devices, even if only one device is matched. 
  results: | 
    JSON list of device objects, or error. 
  responses: 
    success: 
      - [200, "Success"]
    failure: 
      - [-1, "Request error, such as a malformed device key"]

- 
  name: "Multiple devices by key (as dictionary)"
  uri: "/devices/multikey/as-object/devices"
  types: ["anyjson"]
  methods: ["POST"]
  roles: ["readonly"]
  jsonparameters:
    - 
      auto: "fields"
    -
      name: "devices"
      type: "list of strings"
      required: true 
      description: |
        A list of device keys to search 
  docs: | 
    Fetch devices matching any of multiple device keys.

    Typically this endpoint would be used to monitor the presence of target devices. 

    This API returns a JSON dictionary of devices, indexed by device key.
  results: | 
    JSON dictionary of device objects, or error. 
  responses: 
    success: 
      - [200, "Success"]
    failure: 
      - [-1, "Request error, such as a malformed device key"]
